# coding: utf-8

"""
    Samsara API

    # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FleetApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_fleet_address(self, access_token, address_param, **kwargs):
        """
        /fleet/add_address
        This method adds an address book entry to the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_fleet_address(access_token, address_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param AddressParam address_param: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_fleet_address_with_http_info(access_token, address_param, **kwargs)
        else:
            (data) = self.add_fleet_address_with_http_info(access_token, address_param, **kwargs)
            return data

    def add_fleet_address_with_http_info(self, access_token, address_param, **kwargs):
        """
        /fleet/add_address
        This method adds an address book entry to the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_fleet_address_with_http_info(access_token, address_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param AddressParam address_param: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'address_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_fleet_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `add_fleet_address`")
        # verify the required parameter 'address_param' is set
        if ('address_param' not in params) or (params['address_param'] is None):
            raise ValueError("Missing the required parameter `address_param` when calling `add_fleet_address`")


        collection_formats = {}

        resource_path = '/fleet/add_address'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address_param' in params:
            body_params = params['address_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_fleet_dispatch_jobs(self, access_token, create_dispatch_jobs_param, **kwargs):
        """
        /fleet/dispatch_jobs/create
        Create dispatch jobs in the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fleet_dispatch_jobs(access_token, create_dispatch_jobs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param CreateDispatchJobsParam create_dispatch_jobs_param: (required)
        :return: DispatchJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_fleet_dispatch_jobs_with_http_info(access_token, create_dispatch_jobs_param, **kwargs)
        else:
            (data) = self.create_fleet_dispatch_jobs_with_http_info(access_token, create_dispatch_jobs_param, **kwargs)
            return data

    def create_fleet_dispatch_jobs_with_http_info(self, access_token, create_dispatch_jobs_param, **kwargs):
        """
        /fleet/dispatch_jobs/create
        Create dispatch jobs in the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fleet_dispatch_jobs_with_http_info(access_token, create_dispatch_jobs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param CreateDispatchJobsParam create_dispatch_jobs_param: (required)
        :return: DispatchJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'create_dispatch_jobs_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fleet_dispatch_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `create_fleet_dispatch_jobs`")
        # verify the required parameter 'create_dispatch_jobs_param' is set
        if ('create_dispatch_jobs_param' not in params) or (params['create_dispatch_jobs_param'] is None):
            raise ValueError("Missing the required parameter `create_dispatch_jobs_param` when calling `create_fleet_dispatch_jobs`")


        collection_formats = {}

        resource_path = '/fleet/dispatch_jobs/create'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_dispatch_jobs_param' in params:
            body_params = params['create_dispatch_jobs_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DispatchJobsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet(self, access_token, group_param, **kwargs):
        """
        /fleet/list
        Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet(access_token, group_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupParam group_param: Group ID to query. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_with_http_info(access_token, group_param, **kwargs)
        else:
            (data) = self.get_fleet_with_http_info(access_token, group_param, **kwargs)
            return data

    def get_fleet_with_http_info(self, access_token, group_param, **kwargs):
        """
        /fleet/list
        Get list of the vehicles. This method returns a list of the vehicles in the Samsara Cloud and information about them.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_with_http_info(access_token, group_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupParam group_param: Group ID to query. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'group_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet`")
        # verify the required parameter 'group_param' is set
        if ('group_param' not in params) or (params['group_param'] is None):
            raise ValueError("Missing the required parameter `group_param` when calling `get_fleet`")


        collection_formats = {}

        resource_path = '/fleet/list'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_param' in params:
            body_params = params['group_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_dispatch_jobs(self, access_token, get_dispatch_jobs_param, **kwargs):
        """
        /fleet/dispatch_jobs
        Get the dispatch jobs for the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_dispatch_jobs(access_token, get_dispatch_jobs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GetDispatchJobsParam get_dispatch_jobs_param: (required)
        :return: DispatchJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_dispatch_jobs_with_http_info(access_token, get_dispatch_jobs_param, **kwargs)
        else:
            (data) = self.get_fleet_dispatch_jobs_with_http_info(access_token, get_dispatch_jobs_param, **kwargs)
            return data

    def get_fleet_dispatch_jobs_with_http_info(self, access_token, get_dispatch_jobs_param, **kwargs):
        """
        /fleet/dispatch_jobs
        Get the dispatch jobs for the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_dispatch_jobs_with_http_info(access_token, get_dispatch_jobs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GetDispatchJobsParam get_dispatch_jobs_param: (required)
        :return: DispatchJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'get_dispatch_jobs_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_dispatch_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_dispatch_jobs`")
        # verify the required parameter 'get_dispatch_jobs_param' is set
        if ('get_dispatch_jobs_param' not in params) or (params['get_dispatch_jobs_param'] is None):
            raise ValueError("Missing the required parameter `get_dispatch_jobs_param` when calling `get_fleet_dispatch_jobs`")


        collection_formats = {}

        resource_path = '/fleet/dispatch_jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_dispatch_jobs_param' in params:
            body_params = params['get_dispatch_jobs_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DispatchJobsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_drivers(self, access_token, group_drivers_param, **kwargs):
        """
        /fleet/drivers
        Get all the drivers for the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_drivers(access_token, group_drivers_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupDriversParam group_drivers_param: (required)
        :return: DriversRespose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_drivers_with_http_info(access_token, group_drivers_param, **kwargs)
        else:
            (data) = self.get_fleet_drivers_with_http_info(access_token, group_drivers_param, **kwargs)
            return data

    def get_fleet_drivers_with_http_info(self, access_token, group_drivers_param, **kwargs):
        """
        /fleet/drivers
        Get all the drivers for the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_drivers_with_http_info(access_token, group_drivers_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupDriversParam group_drivers_param: (required)
        :return: DriversRespose
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'group_drivers_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_drivers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_drivers`")
        # verify the required parameter 'group_drivers_param' is set
        if ('group_drivers_param' not in params) or (params['group_drivers_param'] is None):
            raise ValueError("Missing the required parameter `group_drivers_param` when calling `get_fleet_drivers`")


        collection_formats = {}

        resource_path = '/fleet/drivers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_drivers_param' in params:
            body_params = params['group_drivers_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DriversRespose',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_drivers_summary(self, access_token, drivers_summary_param, **kwargs):
        """
        /fleet/drivers/summary
        Get the distance and time each driver in an organization has driven in a given time period.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_drivers_summary(access_token, drivers_summary_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param DriversSummaryParam drivers_summary_param: Org ID and time range to query. (required)
        :return: DriversSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_drivers_summary_with_http_info(access_token, drivers_summary_param, **kwargs)
        else:
            (data) = self.get_fleet_drivers_summary_with_http_info(access_token, drivers_summary_param, **kwargs)
            return data

    def get_fleet_drivers_summary_with_http_info(self, access_token, drivers_summary_param, **kwargs):
        """
        /fleet/drivers/summary
        Get the distance and time each driver in an organization has driven in a given time period.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_drivers_summary_with_http_info(access_token, drivers_summary_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param DriversSummaryParam drivers_summary_param: Org ID and time range to query. (required)
        :return: DriversSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'drivers_summary_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_drivers_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_drivers_summary`")
        # verify the required parameter 'drivers_summary_param' is set
        if ('drivers_summary_param' not in params) or (params['drivers_summary_param'] is None):
            raise ValueError("Missing the required parameter `drivers_summary_param` when calling `get_fleet_drivers_summary`")


        collection_formats = {}

        resource_path = '/fleet/drivers/summary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'drivers_summary_param' in params:
            body_params = params['drivers_summary_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DriversSummaryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_hos_authentication_logs(self, access_token, hos_authentication_logs_param, **kwargs):
        """
        /fleet/hos_authentication_logs
        Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_hos_authentication_logs(access_token, hos_authentication_logs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param HosAuthenticationLogsParam hos_authentication_logs_param: (required)
        :return: HosAuthenticationLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_hos_authentication_logs_with_http_info(access_token, hos_authentication_logs_param, **kwargs)
        else:
            (data) = self.get_fleet_hos_authentication_logs_with_http_info(access_token, hos_authentication_logs_param, **kwargs)
            return data

    def get_fleet_hos_authentication_logs_with_http_info(self, access_token, hos_authentication_logs_param, **kwargs):
        """
        /fleet/hos_authentication_logs
        Get the HOS (hours of service) signin and signout logs for the specified driver. Only signout logs include location information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_hos_authentication_logs_with_http_info(access_token, hos_authentication_logs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param HosAuthenticationLogsParam hos_authentication_logs_param: (required)
        :return: HosAuthenticationLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'hos_authentication_logs_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_hos_authentication_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_hos_authentication_logs`")
        # verify the required parameter 'hos_authentication_logs_param' is set
        if ('hos_authentication_logs_param' not in params) or (params['hos_authentication_logs_param'] is None):
            raise ValueError("Missing the required parameter `hos_authentication_logs_param` when calling `get_fleet_hos_authentication_logs`")


        collection_formats = {}

        resource_path = '/fleet/hos_authentication_logs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hos_authentication_logs_param' in params:
            body_params = params['hos_authentication_logs_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HosAuthenticationLogsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_hos_logs(self, access_token, hos_logs_param, **kwargs):
        """
        /fleet/hos_logs
        Get the HOS (hours of service) logs for the specified driver.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_hos_logs(access_token, hos_logs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param HosLogsParam hos_logs_param: (required)
        :return: HosLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_hos_logs_with_http_info(access_token, hos_logs_param, **kwargs)
        else:
            (data) = self.get_fleet_hos_logs_with_http_info(access_token, hos_logs_param, **kwargs)
            return data

    def get_fleet_hos_logs_with_http_info(self, access_token, hos_logs_param, **kwargs):
        """
        /fleet/hos_logs
        Get the HOS (hours of service) logs for the specified driver.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_hos_logs_with_http_info(access_token, hos_logs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param HosLogsParam hos_logs_param: (required)
        :return: HosLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'hos_logs_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_hos_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_hos_logs`")
        # verify the required parameter 'hos_logs_param' is set
        if ('hos_logs_param' not in params) or (params['hos_logs_param'] is None):
            raise ValueError("Missing the required parameter `hos_logs_param` when calling `get_fleet_hos_logs`")


        collection_formats = {}

        resource_path = '/fleet/hos_logs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hos_logs_param' in params:
            body_params = params['hos_logs_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HosLogsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_locations(self, access_token, group_param, **kwargs):
        """
        /fleet/locations
        Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_locations(access_token, group_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupParam group_param: Group ID to query. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_locations_with_http_info(access_token, group_param, **kwargs)
        else:
            (data) = self.get_fleet_locations_with_http_info(access_token, group_param, **kwargs)
            return data

    def get_fleet_locations_with_http_info(self, access_token, group_param, **kwargs):
        """
        /fleet/locations
        Get current location of vehicles in a group. This method returns the current location in latitude and longitude of all vehicles in a requested group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_locations_with_http_info(access_token, group_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupParam group_param: Group ID to query. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'group_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_locations`")
        # verify the required parameter 'group_param' is set
        if ('group_param' not in params) or (params['group_param'] is None):
            raise ValueError("Missing the required parameter `group_param` when calling `get_fleet_locations`")


        collection_formats = {}

        resource_path = '/fleet/locations'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_param' in params:
            body_params = params['group_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_maintenance_list(self, access_token, group_param, **kwargs):
        """
        /fleet/maintenance/list
        Get list of the vehicles with any engine faults or check light data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_maintenance_list(access_token, group_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupParam group_param: Group ID to query. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_maintenance_list_with_http_info(access_token, group_param, **kwargs)
        else:
            (data) = self.get_fleet_maintenance_list_with_http_info(access_token, group_param, **kwargs)
            return data

    def get_fleet_maintenance_list_with_http_info(self, access_token, group_param, **kwargs):
        """
        /fleet/maintenance/list
        Get list of the vehicles with any engine faults or check light data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_maintenance_list_with_http_info(access_token, group_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param GroupParam group_param: Group ID to query. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'group_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_maintenance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_maintenance_list`")
        # verify the required parameter 'group_param' is set
        if ('group_param' not in params) or (params['group_param'] is None):
            raise ValueError("Missing the required parameter `group_param` when calling `get_fleet_maintenance_list`")


        collection_formats = {}

        resource_path = '/fleet/maintenance/list'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_param' in params:
            body_params = params['group_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_fleet_trips(self, access_token, trips_param, **kwargs):
        """
        /fleet/trips
        Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_trips(access_token, trips_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param TripsParam trips_param: Group ID, vehicle ID and time range to query. (required)
        :return: TripResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_fleet_trips_with_http_info(access_token, trips_param, **kwargs)
        else:
            (data) = self.get_fleet_trips_with_http_info(access_token, trips_param, **kwargs)
            return data

    def get_fleet_trips_with_http_info(self, access_token, trips_param, **kwargs):
        """
        /fleet/trips
        Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_fleet_trips_with_http_info(access_token, trips_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param TripsParam trips_param: Group ID, vehicle ID and time range to query. (required)
        :return: TripResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'trips_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fleet_trips" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `get_fleet_trips`")
        # verify the required parameter 'trips_param' is set
        if ('trips_param' not in params) or (params['trips_param'] is None):
            raise ValueError("Missing the required parameter `trips_param` when calling `get_fleet_trips`")


        collection_formats = {}

        resource_path = '/fleet/trips'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trips_param' in params:
            body_params = params['trips_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TripResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_fleet_dispatch_jobs(self, access_token, update_dispatch_jobs_param, **kwargs):
        """
        /fleet/dispatch_jobs/update
        Update dispatch jobs in the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fleet_dispatch_jobs(access_token, update_dispatch_jobs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param UpdateDispatchJobsParam update_dispatch_jobs_param: (required)
        :return: DispatchJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_fleet_dispatch_jobs_with_http_info(access_token, update_dispatch_jobs_param, **kwargs)
        else:
            (data) = self.update_fleet_dispatch_jobs_with_http_info(access_token, update_dispatch_jobs_param, **kwargs)
            return data

    def update_fleet_dispatch_jobs_with_http_info(self, access_token, update_dispatch_jobs_param, **kwargs):
        """
        /fleet/dispatch_jobs/update
        Update dispatch jobs in the specified group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_fleet_dispatch_jobs_with_http_info(access_token, update_dispatch_jobs_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param UpdateDispatchJobsParam update_dispatch_jobs_param: (required)
        :return: DispatchJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'update_dispatch_jobs_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_fleet_dispatch_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_fleet_dispatch_jobs`")
        # verify the required parameter 'update_dispatch_jobs_param' is set
        if ('update_dispatch_jobs_param' not in params) or (params['update_dispatch_jobs_param'] is None):
            raise ValueError("Missing the required parameter `update_dispatch_jobs_param` when calling `update_fleet_dispatch_jobs`")


        collection_formats = {}

        resource_path = '/fleet/dispatch_jobs/update'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_dispatch_jobs_param' in params:
            body_params = params['update_dispatch_jobs_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DispatchJobsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_vehicles(self, access_token, vehicle_update_param, **kwargs):
        """
        /fleet/set_data
        This method enables the mutation of metadata for vehicles in the Samsara Cloud.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_vehicles(access_token, vehicle_update_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param VehicleUpdateParam vehicle_update_param: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_vehicles_with_http_info(access_token, vehicle_update_param, **kwargs)
        else:
            (data) = self.update_vehicles_with_http_info(access_token, vehicle_update_param, **kwargs)
            return data

    def update_vehicles_with_http_info(self, access_token, vehicle_update_param, **kwargs):
        """
        /fleet/set_data
        This method enables the mutation of metadata for vehicles in the Samsara Cloud.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_vehicles_with_http_info(access_token, vehicle_update_param, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: Samsara API access token. (required)
        :param VehicleUpdateParam vehicle_update_param: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'vehicle_update_param']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vehicles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_token' is set
        if ('access_token' not in params) or (params['access_token'] is None):
            raise ValueError("Missing the required parameter `access_token` when calling `update_vehicles`")
        # verify the required parameter 'vehicle_update_param' is set
        if ('vehicle_update_param' not in params) or (params['vehicle_update_param'] is None):
            raise ValueError("Missing the required parameter `vehicle_update_param` when calling `update_vehicles`")


        collection_formats = {}

        resource_path = '/fleet/set_data'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vehicle_update_param' in params:
            body_params = params['vehicle_update_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
