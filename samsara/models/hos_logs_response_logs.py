# coding: utf-8

"""
    Samsara API

    # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HosLogsResponseLogs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, group_id=None, vehicle_id=None, driver_id=None, log_start_ms=None, status_type=None, loc_city=None, loc_state=None, loc_lat=None, loc_lng=None):
        """
        HosLogsResponseLogs - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'group_id': 'int',
            'vehicle_id': 'int',
            'driver_id': 'int',
            'log_start_ms': 'int',
            'status_type': 'str',
            'loc_city': 'str',
            'loc_state': 'str',
            'loc_lat': 'float',
            'loc_lng': 'float'
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'vehicle_id': 'vehicleId',
            'driver_id': 'driverId',
            'log_start_ms': 'logStartMs',
            'status_type': 'statusType',
            'loc_city': 'locCity',
            'loc_state': 'locState',
            'loc_lat': 'locLat',
            'loc_lng': 'locLng'
        }

        self._group_id = group_id
        self._vehicle_id = vehicle_id
        self._driver_id = driver_id
        self._log_start_ms = log_start_ms
        self._status_type = status_type
        self._loc_city = loc_city
        self._loc_state = loc_state
        self._loc_lat = loc_lat
        self._loc_lng = loc_lng

    @property
    def group_id(self):
        """
        Gets the group_id of this HosLogsResponseLogs.
        ID of the group.

        :return: The group_id of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this HosLogsResponseLogs.
        ID of the group.

        :param group_id: The group_id of this HosLogsResponseLogs.
        :type: int
        """

        self._group_id = group_id

    @property
    def vehicle_id(self):
        """
        Gets the vehicle_id of this HosLogsResponseLogs.
        ID of the vehicle.

        :return: The vehicle_id of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """
        Sets the vehicle_id of this HosLogsResponseLogs.
        ID of the vehicle.

        :param vehicle_id: The vehicle_id of this HosLogsResponseLogs.
        :type: int
        """

        self._vehicle_id = vehicle_id

    @property
    def driver_id(self):
        """
        Gets the driver_id of this HosLogsResponseLogs.
        ID of the driver.

        :return: The driver_id of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """
        Sets the driver_id of this HosLogsResponseLogs.
        ID of the driver.

        :param driver_id: The driver_id of this HosLogsResponseLogs.
        :type: int
        """

        self._driver_id = driver_id

    @property
    def log_start_ms(self):
        """
        Gets the log_start_ms of this HosLogsResponseLogs.
        The time at which the log/HOS status started in UNIX milliseconds.

        :return: The log_start_ms of this HosLogsResponseLogs.
        :rtype: int
        """
        return self._log_start_ms

    @log_start_ms.setter
    def log_start_ms(self, log_start_ms):
        """
        Sets the log_start_ms of this HosLogsResponseLogs.
        The time at which the log/HOS status started in UNIX milliseconds.

        :param log_start_ms: The log_start_ms of this HosLogsResponseLogs.
        :type: int
        """

        self._log_start_ms = log_start_ms

    @property
    def status_type(self):
        """
        Gets the status_type of this HosLogsResponseLogs.
        The Hours of Service status type. One of 'OFF_DUTY', 'SLEEPER_BED', 'DRIVING', 'ON_DUTY'.

        :return: The status_type of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._status_type

    @status_type.setter
    def status_type(self, status_type):
        """
        Sets the status_type of this HosLogsResponseLogs.
        The Hours of Service status type. One of 'OFF_DUTY', 'SLEEPER_BED', 'DRIVING', 'ON_DUTY'.

        :param status_type: The status_type of this HosLogsResponseLogs.
        :type: str
        """

        self._status_type = status_type

    @property
    def loc_city(self):
        """
        Gets the loc_city of this HosLogsResponseLogs.
        City in which the log was recorded.

        :return: The loc_city of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._loc_city

    @loc_city.setter
    def loc_city(self, loc_city):
        """
        Sets the loc_city of this HosLogsResponseLogs.
        City in which the log was recorded.

        :param loc_city: The loc_city of this HosLogsResponseLogs.
        :type: str
        """

        self._loc_city = loc_city

    @property
    def loc_state(self):
        """
        Gets the loc_state of this HosLogsResponseLogs.
        State in which the log was recorded.

        :return: The loc_state of this HosLogsResponseLogs.
        :rtype: str
        """
        return self._loc_state

    @loc_state.setter
    def loc_state(self, loc_state):
        """
        Sets the loc_state of this HosLogsResponseLogs.
        State in which the log was recorded.

        :param loc_state: The loc_state of this HosLogsResponseLogs.
        :type: str
        """

        self._loc_state = loc_state

    @property
    def loc_lat(self):
        """
        Gets the loc_lat of this HosLogsResponseLogs.
        Latitude at which the log was recorded.

        :return: The loc_lat of this HosLogsResponseLogs.
        :rtype: float
        """
        return self._loc_lat

    @loc_lat.setter
    def loc_lat(self, loc_lat):
        """
        Sets the loc_lat of this HosLogsResponseLogs.
        Latitude at which the log was recorded.

        :param loc_lat: The loc_lat of this HosLogsResponseLogs.
        :type: float
        """

        self._loc_lat = loc_lat

    @property
    def loc_lng(self):
        """
        Gets the loc_lng of this HosLogsResponseLogs.
        Longitude at which the log was recorded.

        :return: The loc_lng of this HosLogsResponseLogs.
        :rtype: float
        """
        return self._loc_lng

    @loc_lng.setter
    def loc_lng(self, loc_lng):
        """
        Sets the loc_lng of this HosLogsResponseLogs.
        Longitude at which the log was recorded.

        :param loc_lng: The loc_lng of this HosLogsResponseLogs.
        :type: float
        """

        self._loc_lng = loc_lng

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
