# coding: utf-8

"""
    Samsara API

    # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DriversSummaryResponseSummaries(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, driver_id=None, driver_name=None, group_id=None, active_ms=None, distance_meters=None):
        """
        DriversSummaryResponseSummaries - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'driver_id': 'int',
            'driver_name': 'str',
            'group_id': 'int',
            'active_ms': 'int',
            'distance_meters': 'int'
        }

        self.attribute_map = {
            'driver_id': 'driverId',
            'driver_name': 'driverName',
            'group_id': 'groupId',
            'active_ms': 'activeMs',
            'distance_meters': 'distanceMeters'
        }

        self._driver_id = driver_id
        self._driver_name = driver_name
        self._group_id = group_id
        self._active_ms = active_ms
        self._distance_meters = distance_meters

    @property
    def driver_id(self):
        """
        Gets the driver_id of this DriversSummaryResponseSummaries.
        ID of the driver.

        :return: The driver_id of this DriversSummaryResponseSummaries.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """
        Sets the driver_id of this DriversSummaryResponseSummaries.
        ID of the driver.

        :param driver_id: The driver_id of this DriversSummaryResponseSummaries.
        :type: int
        """

        self._driver_id = driver_id

    @property
    def driver_name(self):
        """
        Gets the driver_name of this DriversSummaryResponseSummaries.
        Name of the driver.

        :return: The driver_name of this DriversSummaryResponseSummaries.
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """
        Sets the driver_name of this DriversSummaryResponseSummaries.
        Name of the driver.

        :param driver_name: The driver_name of this DriversSummaryResponseSummaries.
        :type: str
        """

        self._driver_name = driver_name

    @property
    def group_id(self):
        """
        Gets the group_id of this DriversSummaryResponseSummaries.
        Group of the driver.

        :return: The group_id of this DriversSummaryResponseSummaries.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this DriversSummaryResponseSummaries.
        Group of the driver.

        :param group_id: The group_id of this DriversSummaryResponseSummaries.
        :type: int
        """

        self._group_id = group_id

    @property
    def active_ms(self):
        """
        Gets the active_ms of this DriversSummaryResponseSummaries.
        Milliseconds spent on duty or driving.

        :return: The active_ms of this DriversSummaryResponseSummaries.
        :rtype: int
        """
        return self._active_ms

    @active_ms.setter
    def active_ms(self, active_ms):
        """
        Sets the active_ms of this DriversSummaryResponseSummaries.
        Milliseconds spent on duty or driving.

        :param active_ms: The active_ms of this DriversSummaryResponseSummaries.
        :type: int
        """

        self._active_ms = active_ms

    @property
    def distance_meters(self):
        """
        Gets the distance_meters of this DriversSummaryResponseSummaries.
        Distance driven in meters.

        :return: The distance_meters of this DriversSummaryResponseSummaries.
        :rtype: int
        """
        return self._distance_meters

    @distance_meters.setter
    def distance_meters(self, distance_meters):
        """
        Sets the distance_meters of this DriversSummaryResponseSummaries.
        Distance driven in meters.

        :param distance_meters: The distance_meters of this DriversSummaryResponseSummaries.
        :type: int
        """

        self._distance_meters = distance_meters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
