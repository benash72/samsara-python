# coding: utf-8

"""
    Samsara API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TripResponseTrips(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start_ms=None, end_ms=None, start_location=None, end_location=None):
        """
        TripResponseTrips - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start_ms': 'int',
            'end_ms': 'int',
            'start_location': 'str',
            'end_location': 'str'
        }

        self.attribute_map = {
            'start_ms': 'startMs',
            'end_ms': 'endMs',
            'start_location': 'startLocation',
            'end_location': 'endLocation'
        }

        self._start_ms = start_ms
        self._end_ms = end_ms
        self._start_location = start_location
        self._end_location = end_location

    @property
    def start_ms(self):
        """
        Gets the start_ms of this TripResponseTrips.


        :return: The start_ms of this TripResponseTrips.
        :rtype: int
        """
        return self._start_ms

    @start_ms.setter
    def start_ms(self, start_ms):
        """
        Sets the start_ms of this TripResponseTrips.


        :param start_ms: The start_ms of this TripResponseTrips.
        :type: int
        """

        self._start_ms = start_ms

    @property
    def end_ms(self):
        """
        Gets the end_ms of this TripResponseTrips.


        :return: The end_ms of this TripResponseTrips.
        :rtype: int
        """
        return self._end_ms

    @end_ms.setter
    def end_ms(self, end_ms):
        """
        Sets the end_ms of this TripResponseTrips.


        :param end_ms: The end_ms of this TripResponseTrips.
        :type: int
        """

        self._end_ms = end_ms

    @property
    def start_location(self):
        """
        Gets the start_location of this TripResponseTrips.


        :return: The start_location of this TripResponseTrips.
        :rtype: str
        """
        return self._start_location

    @start_location.setter
    def start_location(self, start_location):
        """
        Sets the start_location of this TripResponseTrips.


        :param start_location: The start_location of this TripResponseTrips.
        :type: str
        """

        self._start_location = start_location

    @property
    def end_location(self):
        """
        Gets the end_location of this TripResponseTrips.


        :return: The end_location of this TripResponseTrips.
        :rtype: str
        """
        return self._end_location

    @end_location.setter
    def end_location(self, end_location):
        """
        Sets the end_location of this TripResponseTrips.


        :param end_location: The end_location of this TripResponseTrips.
        :type: str
        """

        self._end_location = end_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
