# coding: utf-8

"""
    Samsara API

    # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VehicleMaintenanceJ1939CheckEngineLight(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, emissions_is_on=None, protect_is_on=None, stop_is_on=None, warning_is_on=None):
        """
        VehicleMaintenanceJ1939CheckEngineLight - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'emissions_is_on': 'bool',
            'protect_is_on': 'bool',
            'stop_is_on': 'bool',
            'warning_is_on': 'bool'
        }

        self.attribute_map = {
            'emissions_is_on': 'emissionsIsOn',
            'protect_is_on': 'protectIsOn',
            'stop_is_on': 'stopIsOn',
            'warning_is_on': 'warningIsOn'
        }

        self._emissions_is_on = emissions_is_on
        self._protect_is_on = protect_is_on
        self._stop_is_on = stop_is_on
        self._warning_is_on = warning_is_on

    @property
    def emissions_is_on(self):
        """
        Gets the emissions_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :return: The emissions_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :rtype: bool
        """
        return self._emissions_is_on

    @emissions_is_on.setter
    def emissions_is_on(self, emissions_is_on):
        """
        Sets the emissions_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :param emissions_is_on: The emissions_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :type: bool
        """

        self._emissions_is_on = emissions_is_on

    @property
    def protect_is_on(self):
        """
        Gets the protect_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :return: The protect_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :rtype: bool
        """
        return self._protect_is_on

    @protect_is_on.setter
    def protect_is_on(self, protect_is_on):
        """
        Sets the protect_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :param protect_is_on: The protect_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :type: bool
        """

        self._protect_is_on = protect_is_on

    @property
    def stop_is_on(self):
        """
        Gets the stop_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :return: The stop_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :rtype: bool
        """
        return self._stop_is_on

    @stop_is_on.setter
    def stop_is_on(self, stop_is_on):
        """
        Sets the stop_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :param stop_is_on: The stop_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :type: bool
        """

        self._stop_is_on = stop_is_on

    @property
    def warning_is_on(self):
        """
        Gets the warning_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :return: The warning_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :rtype: bool
        """
        return self._warning_is_on

    @warning_is_on.setter
    def warning_is_on(self, warning_is_on):
        """
        Sets the warning_is_on of this VehicleMaintenanceJ1939CheckEngineLight.

        :param warning_is_on: The warning_is_on of this VehicleMaintenanceJ1939CheckEngineLight.
        :type: bool
        """

        self._warning_is_on = warning_is_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VehicleMaintenanceJ1939CheckEngineLight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
