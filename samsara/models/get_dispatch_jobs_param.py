# coding: utf-8

"""
    Samsara API


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class GetDispatchJobsParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, group_id=None, job_created_at_max_ms=None, duration_seconds=None):
        """
        GetDispatchJobsParam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'group_id': 'int',
            'job_created_at_max_ms': 'int',
            'duration_seconds': 'int'
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'job_created_at_max_ms': 'job_created_at_max_ms',
            'duration_seconds': 'duration_seconds'
        }

        self._group_id = group_id
        self._job_created_at_max_ms = job_created_at_max_ms
        self._duration_seconds = duration_seconds

    @property
    def group_id(self):
        """
        Gets the group_id of this GetDispatchJobsParam.


        :return: The group_id of this GetDispatchJobsParam.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this GetDispatchJobsParam.


        :param group_id: The group_id of this GetDispatchJobsParam.
        :type: int
        """

        self._group_id = group_id

    @property
    def job_created_at_max_ms(self):
        """
        Gets the job_created_at_max_ms of this GetDispatchJobsParam.


        :return: The job_created_at_max_ms of this GetDispatchJobsParam.
        :rtype: int
        """
        return self._job_created_at_max_ms

    @job_created_at_max_ms.setter
    def job_created_at_max_ms(self, job_created_at_max_ms):
        """
        Sets the job_created_at_max_ms of this GetDispatchJobsParam.


        :param job_created_at_max_ms: The job_created_at_max_ms of this GetDispatchJobsParam.
        :type: int
        """

        self._job_created_at_max_ms = job_created_at_max_ms

    @property
    def duration_seconds(self):
        """
        Gets the duration_seconds of this GetDispatchJobsParam.


        :return: The duration_seconds of this GetDispatchJobsParam.
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """
        Sets the duration_seconds of this GetDispatchJobsParam.


        :param duration_seconds: The duration_seconds of this GetDispatchJobsParam.
        :type: int
        """

        self._duration_seconds = duration_seconds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
