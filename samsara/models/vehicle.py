# coding: utf-8

"""
    Samsara API

    # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.  

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Vehicle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, note=None, vin=None, odometer_meters=None):
        """
        Vehicle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'note': 'str',
            'vin': 'str',
            'odometer_meters': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'note': 'note',
            'vin': 'vin',
            'odometer_meters': 'odometerMeters'
        }

        self._id = id
        self._name = name
        self._note = note
        self._vin = vin
        self._odometer_meters = odometer_meters

    @property
    def id(self):
        """
        Gets the id of this Vehicle.
        ID of the vehicle.

        :return: The id of this Vehicle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Vehicle.
        ID of the vehicle.

        :param id: The id of this Vehicle.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Vehicle.
        Name of the vehicle.

        :return: The name of this Vehicle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Vehicle.
        Name of the vehicle.

        :param name: The name of this Vehicle.
        :type: str
        """

        self._name = name

    @property
    def note(self):
        """
        Gets the note of this Vehicle.

        :return: The note of this Vehicle.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Vehicle.

        :param note: The note of this Vehicle.
        :type: str
        """

        self._note = note

    @property
    def vin(self):
        """
        Gets the vin of this Vehicle.
        Vehicle Identification Number.

        :return: The vin of this Vehicle.
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """
        Sets the vin of this Vehicle.
        Vehicle Identification Number.

        :param vin: The vin of this Vehicle.
        :type: str
        """

        self._vin = vin

    @property
    def odometer_meters(self):
        """
        Gets the odometer_meters of this Vehicle.
        The number of meters reported by the odometer.

        :return: The odometer_meters of this Vehicle.
        :rtype: int
        """
        return self._odometer_meters

    @odometer_meters.setter
    def odometer_meters(self, odometer_meters):
        """
        Sets the odometer_meters of this Vehicle.
        The number of meters reported by the odometer.

        :param odometer_meters: The odometer_meters of this Vehicle.
        :type: int
        """

        self._odometer_meters = odometer_meters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Vehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
